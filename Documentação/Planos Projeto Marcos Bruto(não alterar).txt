Componentes:
-Front (Vite + React)
--Calculadora (Javascript)
--Gerenciamento (Javascript)
--Mediador (Javascript)
-Back (Express)
-Banco de Dados (SQL)

Como executar tudo:
-Front, Back, Calculadora, Mediador (Vercel)
-Banco de Dados:
--Opção 1: MySQL
--Opção 2: Postgre

Casos de Uso(Diagrama Feito):
-Atores:
--Estudante
--Pesquisador
-Casos de Uso:
--Simular modelos matemáticos
--Comunicar com membros da equipe
--Organizar dados
--Calcular Estatísticas Relevantes

Entidades e Relacionamentos(Diagrama Feito):
-Cada estudante/equipe terá várias tabelas de dados, mas cada tabela pode ser acessada apenas por um estudante ou uma equipe. Uma equipe pode ser composta por diversos estudantes

Outros Diagramas:
-Classe(ver abaixo)
-Sequência(?)
-Diagrama de Componentes

Classes:
-Design Patterns:
--(Abstract) Factory
--Singleton(?)
-Arquiteturas:
--Camadas (Por enquanto)
--Microserviços(?)
--MVC
--Pipeline

Servidor:
-Rotas:
--GET (checar disponibilidade do servidor), uma rota
--POST (login), uma rota
--POST (receber e enviar dados da estatística), duas rotas
--POST (receber e enviar dados da simulação), duas rotas
--POST (receber e enviar dados do gerenciamento), duas rotas
--Segunda possibilidade:
---POST (uma só rota que engloba todas as funcionalidades acima, dependendo da informação recebida do model)
-+Total: 8 rotas

Interações:
-Arquitetura MVC:
--Model:
---Conexão com o Banco
---Servidor
---Singleton
---Mediador
----Calculadora:
-----Calculadora Estatística Geral
------Regressão
-----Simulador
------Plotagem de gráficos
------Simuladores específicos
---Gerenciamento:
----Dados salvos
----Informações
----Equipes
--View:
---Cores: Azul (Primária), Verde
---Página inicial
---Login
---Seletor entre três páginas:
----Calculadora 
-----
----Simuladores
-----
----Gerenciamento de Dados e Grupos
-----
--Controller:

Testes:
-Implementar softwares de teste (Cypress, Amplitude, e outros a decidir)